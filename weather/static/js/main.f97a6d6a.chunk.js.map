{"version":3,"sources":["components/Form/Form.js","components/Form/index.js","components/store/actions.js","components/TransitionsModal/TransitionsModal.js","components/TableData/TableData.js","components/TableData/index.js","App.js","serviceWorker.js","components/store/reducer.js","components/store/middleware.js","components/store/rootMiddleware.js","components/store/index.js","index.js"],"names":["Container","styled","div","Form","dispatch","useDispatch","inputValue","useSelector","state","Input","placeholder","autoFocus","onChange","event","type","payload","target","value","length","Button","variant","disabled","onClick","color","useStyles","makeStyles","theme","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","TransitionsModal","props","classes","React","useState","open","setOpen","city","data","index","Modal","aria-labelledby","aria-describedby","className","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","id","temperature","feelslike","weather_descriptions","wind_speed","wind_dir","pressure","humidity","table","minWidth","TableData","removeCity","rows","map","el","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","key","scope","App","Boolean","window","location","hostname","match","initialState","country","latitude","longitude","localtime","is_day","rootMiddleware","composeWithDevTools","applyMiddleware","store","next","action","getState","fetch","then","res","json","console","log","setData","createStore","name","lat","lon","current","filter","element","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f97a6d6a.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getInputvalue, getData } from '../store/actions'\r\nimport Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport styled from 'styled-components'\r\n\r\nexport default function Form(){\r\n\r\n    let dispatch = useDispatch();\r\n    let inputValue = useSelector(state => state.inputValue)\r\n\r\n    function setInputValue(event){\r\n        dispatch(getInputvalue(event.target.value))\r\n    }\r\n\r\n    function getWeather(){\r\n        dispatch(getData())\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Input placeholder = 'City' autoFocus = {true} onChange = {setInputValue} value = {inputValue}/>\r\n            {inputValue.length === 0?\r\n                <Button variant=\"contained\" disabled>\r\n                Search\r\n                </Button>\r\n            :\r\n                <Button onClick = {getWeather} variant=\"contained\" color=\"primary\">\r\n                    Search\r\n                </Button>}\r\n        </Container>\r\n        \r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 300px;\r\n    display: flex;\r\n    flex-flow: row;\r\n    align-items: center;\r\n    justify-content: center;\r\n`","import Form from './Form'\r\nexport default Form","export const GET_INPUTVALUE = 'GET_INPUTVALUE';\r\nexport const GET_DATA = 'GET_DATA';\r\nexport const SET_DATA = 'SET_DATA';\r\nexport const SET_NEW_CITY = 'SET_NEW_CITY';\r\nexport const SPLICE_DATA = 'SPLICE_DATA';\r\nexport const SHOW_INFO = 'SHOW_INFO';\r\n\r\nexport function getInputvalue(payload){\r\n    return{\r\n        type: GET_INPUTVALUE,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport function getData(payload){\r\n    return{\r\n        type: GET_DATA,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport function setData(payload){\r\n    return{\r\n        type: SET_DATA,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport function setNewCity(payload){\r\n    return{\r\n        type: SET_NEW_CITY,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport function spliceData(payload){\r\n    return{\r\n        type: SPLICE_DATA,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport function showInfo(payload){\r\n    return{\r\n        type: SHOW_INFO,\r\n        payload: payload\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nexport default function TransitionsModal(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  let city = useSelector(state => state.data[props.index])\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"contained\" color=\"secondary\" onClick={handleOpen}>\r\n        More\r\n      </Button>\r\n      <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={open}>\r\n          <div className={classes.paper}>\r\n            <h2 id=\"transition-modal-title\">{city.city}</h2>\r\n            <p id=\"transition-modal-description\">Temperature:{city.temperature}</p>\r\n            <p id=\"transition-modal-description\">Feelslike:{city.feelslike}</p>\r\n            <p id=\"transition-modal-description\">Weather descriptions:{city.weather_descriptions}</p>\r\n            <p id=\"transition-modal-description\">Wind speed{city.wind_speed}</p>\r\n            <p id=\"transition-modal-description\">Wind direction:{city.wind_dir}</p>\r\n            <p id=\"transition-modal-description\">Pressure:{city.pressure}</p>\r\n            <p id=\"transition-modal-description\">Humidity:{city.humidity}</p>\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { spliceData } from '../store/actions'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TransitionsModal from '../TransitionsModal/TransitionsModal'\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nfunction createData(city, temperature, feelslike, weather_descriptions, index) {\r\n  return { city, temperature, feelslike, weather_descriptions };\r\n}\r\n\r\nexport default function TableData() {\r\n  \r\nlet data = useSelector(state => state.data);\r\nlet dispatch = useDispatch();\r\n\r\nconst removeCity = (index) => () =>{\r\n  dispatch(spliceData(index));\r\n}\r\n\r\nconst rows = data.map((el, index) => createData(el.city, el.temperature, el.feelslike, el.weather_descriptions, index))\r\n    \r\n  const classes = useStyles();\r\n\r\n  return (\r\n    data.length !== 0?\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"center\">City</TableCell>\r\n            <TableCell align=\"center\">Temperature</TableCell>\r\n            <TableCell align=\"center\">feelslike</TableCell>\r\n            <TableCell align=\"center\">Weather descriptions</TableCell>\r\n            <TableCell align=\"center\">More informtion</TableCell>\r\n            <TableCell align=\"center\">Delete Ciy</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row, index) => (\r\n            <TableRow key={row.city}>\r\n              <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                {row.city}\r\n              </TableCell>\r\n              <TableCell align=\"center\">{row.temperature}</TableCell>\r\n              <TableCell align=\"center\">{row.feelslike}</TableCell>\r\n              <TableCell align=\"center\">{row.weather_descriptions}</TableCell>\r\n              <TableCell align=\"center\">\r\n                <TransitionsModal index = {index}/>\r\n              </TableCell>\r\n              <TableCell align=\"center\">\r\n                <Button onClick = {removeCity(index)} variant=\"contained\" color=\"secondary\">\r\n                  Delete\r\n                </Button>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n    : ''\r\n  );\r\n}\r\n","import TableData from './TableData'\r\nexport default TableData","import React from 'react';\nimport Form from './components/Form'\nimport TableData from './components/TableData'\n\nfunction App() {\n\n  return (\n    <div className = \"main\">\n      <Form />\n      <TableData />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {GET_INPUTVALUE, SET_DATA, SET_NEW_CITY, SPLICE_DATA} from './actions'\r\n\r\nconst initialState = {\r\n    inputValue: '',\r\n    data: [],\r\n    city: {\r\n        city: '',\r\n        country: '',\r\n        latitude: 0,\r\n        longitude: 0,\r\n        localtime: '',\r\n        temperature: 0,\r\n        weather_descriptions: '',\r\n        wind_speed: 0,\r\n        wind_dir: 0,\r\n        pressure: 0,\r\n        humidity: 0,\r\n        feelslike: 0,\r\n        is_day: '',\r\n    }\r\n}\r\n\r\nexport function dataReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n\r\n        case GET_INPUTVALUE: {\r\n            return {\r\n                ...state,\r\n                inputValue: action.payload\r\n            }\r\n        }\r\n\r\n        case SET_NEW_CITY: {\r\n            return{\r\n                ...state,\r\n                city: {\r\n                    city: action.payload.location.name,\r\n                    country: action.payload.location.country,\r\n                    latitude: action.payload.location.lat,\r\n                    longitude: action.payload.location.lon,\r\n                    localtime: action.payload.location.localtime,\r\n                    temperature: action.payload.current.temperature,\r\n                    weather_descriptions: action.payload.current.weather_descriptions[0],\r\n                    wind_speed: action.payload.current.wind_speed,\r\n                    wind_dir: action.payload.current.wind_dir,\r\n                    pressure: action.payload.current.pressure,\r\n                    humidity: action.payload.current.humidity,\r\n                    feelslike: action.payload.current.feelslike,\r\n                    is_day: action.payload.current.is_day,\r\n                },\r\n                inputValue: ''\r\n            }\r\n\r\n        }\r\n\r\n        case SET_DATA: {\r\n            return{\r\n                ...state,\r\n                data: [...state.data, state.city]\r\n            }\r\n        }\r\n\r\n\r\n\r\n        case SPLICE_DATA: {\r\n            return{\r\n                ...state,\r\n                data: state.data.filter(element => element !== state.data[action.payload]),\r\n            }\r\n        }\r\n\r\n        default: return state\r\n    }\r\n}","import { GET_DATA } from './actions'\r\nimport { setNewCity, setData } from './actions'\r\n\r\nexport const usersMiddleware = store => next => action => {\r\n\r\n    const { inputValue } = store.getState();\r\n\r\n    if(action.type ===  GET_DATA) {\r\n        fetch(`http://api.weatherstack.com/current?access_key=f7fbc6b9c5d16a6419e5597c3d6f5030&query=${inputValue}`)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            console.log(data)\r\n            store.dispatch(setNewCity(data))\r\n            store.dispatch(setData())\r\n        })\r\n    }\r\n    \r\n    next(action)\r\n}\r\n","import { applyMiddleware } from 'redux'\r\nimport { usersMiddleware } from './middleware'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n\r\nexport const rootMiddleware = composeWithDevTools(applyMiddleware(usersMiddleware))","import { createStore } from 'redux'\r\nimport { dataReducer } from './reducer'\r\nimport { rootMiddleware } from './rootMiddleware'\r\n\r\nexport const store = createStore(dataReducer, rootMiddleware)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { store } from './components/store'\n\n  ReactDOM.render(<Provider store = {store}><App /></Provider>, document.getElementById('root'));\n  \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}